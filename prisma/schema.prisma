// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Skill {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String

  candidateIds String[] @db.ObjectId
  candidates  Candidate[] @relation(fields: [candidateIds], references: [id])

  jobIds String[] @db.ObjectId
  jobs  Job[] @relation(fields: [jobIds], references: [id])
}

model Experience {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  company     String
  designation String

  candidateIds String[] @db.ObjectId
  candidates  Candidate[] @relation(fields: [candidateIds], references: [id])

  startDate   DateTime
  endDate     DateTime
}

model Candidate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String
  email         String @unique
  password      String
  contactNumber String?

  bio               String?
  yearsOfExperience Int? @default(0)
  educationLevel    String?

  profilePic    String?
  portfolioLink String?

  company     String?
  designation String?

  skillIds String[] @db.ObjectId
  skills  Skill[] @relation(fields: [skillIds], references: [id])

  experienceIds String[] @db.ObjectId
  experiences  Experience[] @relation(fields: [experienceIds], references: [id])

  appliedJobs Application[]
  savedJobs   SavedJob[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  email String @unique
  password String

  about    String
  size     Int @default(1)
  location String
  jobs     Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Industry {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs  Job[]
}

model JobType {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs  Job[]
}

model Remote {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs  Job[]
}

model Level {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs  Job[]
}

model Job {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title      String
  description String

  industryId String   @db.ObjectId
  industry   Industry @relation(fields: [industryId], references: [id])

  typeId String  @db.ObjectId
  type   JobType @relation(fields: [typeId], references: [id])

  remoteId String @db.ObjectId
  remote   Remote @relation(fields: [remoteId], references: [id])

  levelId String @db.ObjectId
  level   Level  @relation(fields: [levelId], references: [id])

  skillIds String[] @db.ObjectId
  skills   Skill[]  @relation(fields: [skillIds], references: [id])

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  saved       SavedJob[]
  application Application[]
}

model Application {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  candidateId String    @db.ObjectId
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  jobId String @db.ObjectId
  job   Job    @relation(fields: [jobId], references: [id])

  createdAt DateTime @default(now())
}

model SavedJob {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  candidateId String    @db.ObjectId
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  jobId String @db.ObjectId
  job   Job    @relation(fields: [jobId], references: [id])

  createdAt DateTime @default(now())
}
